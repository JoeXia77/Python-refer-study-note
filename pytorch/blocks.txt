## the input format should be [1,1,32,32]  which is [batch_size, channel, row, column]
## then, transport the input through each layer:    torch.nn.   or through function:    F.

################## layers #################
import torch.nn as nn

## 1. get an Convolutional layer:
## initialize it in     def __init__():
self.conv1 = torch.nn.Conv2d(input channel, output channel, filter side)
## example:
def __init__(self):
	self.conv1 = nn.Conv2d(1, 6, 3)
	self.conv2 = nn.Conv2d(6, 16, (3,3))

## 2. get an Linear layer:
layerName1 = nn.Linear(inputNodes, outputNodes)
## example:
self.fc2 = nn.Linear(120, 84)

################## functions #################
import torch.nn.functional as F

## 1. relu function:     input:x return max(0,x)
output = F.relu(input)

## 2. maxpooling:  F.max_pool2d(target, kernel_size)
## example:
x = torch.rand(1,3,5)  ## input format should be: channel, pic_row, pic_col 
x = F.max_pool2d(x, 2) ## here kernel_size is 2, 
			##the rest of the edge that is not used will be discard
print(x)















